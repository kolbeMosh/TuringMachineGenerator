# Written By: Kolbe Mosher
# Purpose:  Converts plaintext TM's into a visual representation 
#           of the Turing Machine Using Graphviz

import graphviz

class TMtoDot:
    def __init__(self, file: str, fileName: str, directory: str, fileType, move=None) -> None:
        self._file = file
        self._fileType = fileType
        self._fileName = fileName
        self._directory = directory

        self._graph = graphviz.Digraph(comment='Automatically Generated by TMtoDot.py Program By Kolbe Mosher', format=self._fileType)
        self._move = move

        self._parseEdges() 
        self.genFile()
   

    def genFile(self):
        self._graph.graph_attr['concentrate'] = 'true'
        self._graph.graph_attr['rankdir'] = 'LR'
        self._graph.render(directory=self._directory, cleanup=True, filename=self._fileName)
        print(f'Successfully saved image to {self._directory}/{self._fileName}.{self._fileType}')

    def _parseEdges(self):
        i = 0
        f = open(self._file)
        lines = f.readlines()

        for line in lines:
            line = line.strip()
            if (i == 0):
                self._graph.node("kolbeMosher6981", color='white', label='')
                self._graph.edge("kolbeMosher6981", line, label='')
            elif (i == 1):
                pass
            elif (i == 2):
                accepting = [ char for char in line ]
                for token in accepting:
                    self._graph.node(token, shape='doublecircle', label=f'{token}')
            else:
                if ( (line[0], line[1], line[2], line[3], line[4] ) == (self._move)):
                    self._graph.edge(line[0], line[2], label=f'{line[1]}/{line[3]},{line[4]}', color="red")
                else:
                    self._graph.edge(line[0], line[2], label=f'{line[1]}/{line[3]},{line[4]}')
            i += 1
        f.close()